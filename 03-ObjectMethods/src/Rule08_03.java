/**
 * Created by gunny on 2017. 7. 25..
 **/
public class Rule08_03 {

 /*
  * 1. == 연산자를 사용하여 equals의 인자가 자기 자신인지를 검사한다
  * 2. instanceof 연산자를 사용하여 인자의 자료형이 정확한지 검사하라.
  * 3. equals의 인자를 정확한 자료형으로 변환하라.
  * 4. "중요" 필드 각각이 인자로 주어진 객체의 해당 필드와 일치하는 지 검사한다.
  *     모두 일치하는 경우에는 true를 반환하고, 그렇지 않은 경우에는 false를 반환한다.
  *     2단계에서 검사한 자료형이 인터페이스였다면 인터페이스 메서드를 통해 필드를 접근해야 할 것이다.
  *     float나 double이외의 기본 자료형은 == 연산자로 비교하면 된다. 객체 참조 필드는 equals 메소드를
  *     재귀적으로 호출하여 검사한다.
  *
  *    null에 대한 참조가 허용된 객체 참조 필드에 대한 비교는 NullPointerException을 막기 위해
  *    (field == null ? o.field == null : field.equals(o.field)
  *
  *    this 객체의 필드와 인자가 가리키는 객체의 필드가 동일한 객체를 참조하는 경우는 다음과 같이 비교하는 것이 빠르다.
  *    (field == o.field || (field != null && field.equals(o.field)))
  * 5. equals 메소드 구현을 끝냈다면, 대칭성, 추이성, 일관성ㅇ의 세 속성이 만족되는지 검토하라!
  *
  * 6. equals를 구현할 떄는 hashCode도 재정의하라.
  * 7. 너무 머리 쓰지 마라. 필드들만 보고 동치성을 검사하면 equals 규약을 준수하기가 수월하다.
  *    그러나 동치성에 너무 집착하다보면 함정에 빠지는 수가 있다.
  *    ex) File 클래스는 같은 파일을 가리키는 심벌릭 링크라도 같다고 판단하면 안 된다.
  * 8. equals 메소드의 인자 형을 Object에서 다른 것으로 바꾸지 마라.
  */
}
